<?php

namespace App\Livewire\Dashboard;

use Livewire\Component;
use App\Models\Advocacy;
use Livewire\WithPagination;
use Livewire\WithFileUploads;
use Illuminate\Support\Facades\Storage;

class ManageAdvocacies extends Component
{
    use WithPagination, WithFileUploads;

    // Form properties
    public $advocacyId;
    public $title;
    public $content;
    public $image;
    public $newImage;

    // List filtering and sorting properties
    public $search = '';
    public $sortField = 'title';
    public $sortDirection = 'asc';

    protected function rules()
    {
        return [
            'title' => 'required|string|max:255',
            'content' => 'required|string',
            'newImage' => $this->advocacyId
                ? 'nullable|image|mimes:jpeg,png,jpg,gif|max:2048'
                : 'required|image|mimes:jpeg,png,jpg,gif|max:2048',
        ];
    }

    private function resetFormFields()
    {
        $this->reset([
            'advocacyId',
            'title',
            'content',
            'image',
            'newImage',
        ]);
    }

    public function create()
    {
        $this->resetValidation();
        $this->resetFormFields();
        $this->modal('formModal')->show();
    }

    public function edit($advocacyId)
    {
        $advocacy = Advocacy::findOrFail($advocacyId);

        $this->resetValidation();
        $this->resetFormFields();

        $this->advocacyId = $advocacy->id;
        $this->title = $advocacy->title;
        $this->content = $advocacy->content;
        $this->image = $advocacy->image;

        $this->modal('formModal')->show();
    }

    public function save()
    {
        $this->validate();

        if ($this->advocacyId) {
            $this->updateAdvocacy();
        } else {
            $this->createAdvocacy();
        }

        $this->resetFormFields();
        $this->modal('formModal')->close();
        $this->resetPage();
    }

    private function createAdvocacy()
    {
        // Handle image upload
        $imagePath = $this->storeImage();

        Advocacy::create([
            'title' => $this->title,
            'content' => $this->content,
            'image' => $imagePath,
            // Slug will be auto-generated by the HasSlug trait
        ]);

        flash()->success('Advocacy created successfully.');
    }

    private function updateAdvocacy()
    {
        $advocacy = Advocacy::findOrFail($this->advocacyId);

        $data = [
            'title' => $this->title,
            'content' => $this->content,
        ];

        // Handle image upload if a new image is provided
        if ($this->newImage) {
            // Remove old image
            $this->deleteOldImage($advocacy->image);

            // Store the new image
            $data['image'] = $this->storeImage();
        }

        $advocacy->update($data);

        flash()->success('Advocacy updated successfully.');
    }

    private function storeImage()
    {
        return $this->newImage->store('advocacies', 'public');
    }

    private function deleteOldImage($imagePath)
    {
        if ($imagePath && Storage::disk('public')->exists($imagePath)) {
            Storage::disk('public')->delete($imagePath);
        }
    }

    public function confirmDelete($advocacyId)
    {
        $this->advocacyId = $advocacyId;
        $this->modal('deleteModal')->show();
    }

    public function delete()
    {
        $advocacy = Advocacy::findOrFail($this->advocacyId);

        // Delete the image file
        $this->deleteOldImage($advocacy->image);

        // Delete the advocacy record
        $advocacy->delete();

        flash()->success('Advocacy deleted successfully.');
        $this->modal('deleteModal')->close();
        $this->resetPage();
    }

    public function sortBy($field)
    {
        if ($this->sortField === $field) {
            $this->sortDirection = $this->sortDirection === 'asc' ? 'desc' : 'asc';
        } else {
            $this->sortField = $field;
            $this->sortDirection = 'asc';
        }

        $this->resetPage();
    }

    public function updatedSearch()
    {
        $this->resetPage();
    }

    public function render()
    {
        $advocacies = Advocacy::query()
            ->when($this->search, function ($query) {
                return $query->where(function($q) {
                    $q->where('title', 'like', '%' . $this->search . '%')
                      ->orWhere('content', 'like', '%' . $this->search . '%');
                });
            })
            ->orderBy($this->sortField, $this->sortDirection)
            ->paginate(10);

        return view('livewire.dashboard.manage-advocacies', [
            'advocacies' => $advocacies,
        ]);
    }
}
